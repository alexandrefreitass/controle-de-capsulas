#!/bin/bash

# --- ALERTA M√ÅXIMO ---
echo "üî¥ CUIDADO! Este script √© DESTRUTIVO. üî¥"
echo "Ele vai apagar o banco de dados (db.sqlite3) e todos os arquivos de migra√ß√£o."
echo "Use APENAS em ambiente de desenvolvimento."
read -p "Voc√™ tem certeza que quer continuar? (s/n) " -n 1 -r
echo # Move para a pr√≥xima linha
if [[ ! $REPLY =~ ^[Ss]$ ]]
then
    echo "Opera√ß√£o cancelada."
    exit 1
fi
echo ""

# --- Remo√ß√£o do Banco de Dados ---
echo "üí£ Apagando o banco de dados (db.sqlite3)..."
# O [ -f ... ] garante que o script n√£o falhe se o arquivo n√£o existir
[ -f db.sqlite3 ] && rm db.sqlite3
echo "Banco de dados removido!"
echo ""

# --- Limpeza de Cache do Python ---
echo "üßπ Limpando o cache do Python (.pyc e __pycache__)..."
find . -path "*/__pycache__/*" -delete
find . -type d -name "__pycache__" -empty -delete
echo "Cache do Python limpo!"
echo ""

# --- Limpeza dos Arquivos de Migra√ß√£o ---
echo "üî• Removendo arquivos de migra√ß√£o (arquivos 0*.py)..."

# Itera sobre todos os diret√≥rios no n√≠vel raiz e dentro de 'backend'
# Isso torna o script flex√≠vel para diferentes estruturas de projeto
for app_path in */ backend/*/ ; do
    # Verifica se √© um diret√≥rio v√°lido
    if [ -d "$app_path" ]; then
        MIGRATIONS_DIR="${app_path}migrations"
        
        # Verifica se o diret√≥rio de migra√ß√µes existe
        if [ -d "$MIGRATIONS_DIR" ]; then
            echo "  -> Limpando migra√ß√µes em $MIGRATIONS_DIR"
            # Apaga todos os arquivos .py que come√ßam com '0', exceto __init__.py
            find "$MIGRATIONS_DIR" -type f -name "0*.py" ! -name "__init__.py" -delete
        fi
    fi
done

echo "Arquivos de migra√ß√£o removidos!"
echo ""
echo "‚úÖ Reset completo conclu√≠do com sucesso!"
echo "Pr√≥ximos passos recomendados:"
echo "1. Crie novas migra√ß√µes: python manage.py makemigrations"
echo "2. Aplique-as ao novo banco: python manage.py migrate"